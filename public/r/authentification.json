{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "authentification",
  "type": "registry:component",
  "title": "Authentification",
  "description": "A simple authentification component",
  "dependencies": [
    "better-auth",
    "pg",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/authentification/components/auth/sign-in.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useState } from \"react\";\nimport { Loader2, Key } from \"lucide-react\";\nimport { signIn } from \"@/registry/new-york/authentification/lib/auth-client\";\n\nexport function SignIn() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n\n  return (\n    <Card className=\"max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"text-lg md:text-xl\">Sign In</CardTitle>\n        <CardDescription className=\"text-xs md:text-sm\">\n          Enter your email below to login to your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"m@example.com\"\n              required\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n              value={email}\n            />\n          </div>\n\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center\">\n              <Label htmlFor=\"password\">Password</Label>\n            </div>\n\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"password\"\n              autoComplete=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Checkbox\n              id=\"remember\"\n              onClick={() => {\n                setRememberMe(!rememberMe);\n              }}\n            />\n            <Label htmlFor=\"remember\">Remember me</Label>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={loading}\n            onClick={async () => {\n              await signIn.email(\n                {\n                  email,\n                  password,\n                },\n                {\n                  onRequest: (ctx) => {\n                    setLoading(true);\n                  },\n                  onResponse: (ctx) => {\n                    setLoading(false);\n                  },\n                }\n              );\n            }}\n          >\n            {loading ? (\n              <Loader2 size={16} className=\"animate-spin\" />\n            ) : (\n              <p> Login </p>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/authentification/components/auth/sign-up.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport Image from \"next/image\";\nimport { Loader2, X } from \"lucide-react\";\nimport { signUp } from \"@/registry/new-york/authentification/lib/auth-client\";\nimport { toast } from \"sonner\";\nimport { useRouter } from \"next/navigation\";\n\nexport function SignUp() {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [image, setImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setImage(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <Card className=\"z-50 rounded-md rounded-t-none max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"text-lg md:text-xl\">Sign Up</CardTitle>\n        <CardDescription className=\"text-xs md:text-sm\">\n          Enter your information to create an account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"first-name\">First name</Label>\n              <Input\n                id=\"first-name\"\n                placeholder=\"Max\"\n                required\n                onChange={(e) => {\n                  setFirstName(e.target.value);\n                }}\n                value={firstName}\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"last-name\">Last name</Label>\n              <Input\n                id=\"last-name\"\n                placeholder=\"Robinson\"\n                required\n                onChange={(e) => {\n                  setLastName(e.target.value);\n                }}\n                value={lastName}\n              />\n            </div>\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"m@example.com\"\n              required\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n              value={email}\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              autoComplete=\"new-password\"\n              placeholder=\"Password\"\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"password\">Confirm Password</Label>\n            <Input\n              id=\"password_confirmation\"\n              type=\"password\"\n              value={passwordConfirmation}\n              onChange={(e) => setPasswordConfirmation(e.target.value)}\n              autoComplete=\"new-password\"\n              placeholder=\"Confirm Password\"\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"image\">Profile Image (optional)</Label>\n            <div className=\"flex items-end gap-4\">\n              {imagePreview && (\n                <div className=\"relative w-16 h-16 rounded-sm overflow-hidden\">\n                  <Image\n                    src={imagePreview}\n                    alt=\"Profile preview\"\n                    layout=\"fill\"\n                    objectFit=\"cover\"\n                  />\n                </div>\n              )}\n              <div className=\"flex items-center gap-2 w-full\">\n                <Input\n                  id=\"image\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageChange}\n                  className=\"w-full\"\n                />\n                {imagePreview && (\n                  <X\n                    className=\"cursor-pointer\"\n                    onClick={() => {\n                      setImage(null);\n                      setImagePreview(null);\n                    }}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={loading}\n            onClick={async () => {\n              await signUp.email({\n                email,\n                password,\n                name: `${firstName} ${lastName}`,\n                image: image ? await convertImageToBase64(image) : \"\",\n                callbackURL: \"/dashboard\",\n                fetchOptions: {\n                  onResponse: () => {\n                    setLoading(false);\n                  },\n                  onRequest: () => {\n                    setLoading(true);\n                  },\n                  onError: (ctx) => {\n                    toast.error(ctx.error.message);\n                  },\n                  onSuccess: async () => {\n                    router.push(\"/dashboard\");\n                  },\n                },\n              });\n            }}\n          >\n            {loading ? (\n              <Loader2 size={16} className=\"animate-spin\" />\n            ) : (\n              \"Create an account\"\n            )}\n          </Button>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <div className=\"flex justify-center w-full border-t py-4\">\n          <p className=\"text-center text-xs text-neutral-500\">\n            Secured by <span className=\"text-orange-400\">better-auth.</span>\n          </p>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n\nasync function convertImageToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/authentification/lib/auth-client.ts",
      "content": "import { createAuthClient } from \"better-auth/react\";\n\nexport const authClient = createAuthClient({\n  /** The base URL of the server (optional if you're using the same domain) */\n  baseURL: \"http://localhost:3000\",\n});\n\nexport const { signIn, signOut, signUp, useSession } = authClient;\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/authentification/lib/auth.ts",
      "content": "import { betterAuth } from \"better-auth\";\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n  },\n  database: new Pool({\n    connectionString: process.env.POSTGRES_URL,\n  }),\n});\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/authentification/pages/api/auth/[...all]/route.ts",
      "content": "import { auth } from \"@/registry/new-york/authentification/lib/auth\";\nimport { toNextJsHandler } from \"better-auth/next-js\";\n\nexport const { GET, POST } = toNextJsHandler(auth.handler);\n",
      "type": "registry:page",
      "target": "app/api/auth/[...all]/route.ts"
    }
  ]
}